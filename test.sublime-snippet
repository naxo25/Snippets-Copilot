<snippet>
  <content><![CDATA[
import { mount } from '@vue/test-utils'
import { expect, test, describe } from 'vitest'
import Table from '@/components/Table/tr.vue'

describe('Table', () => {
  test('Si no hay usuarios no monstrar contenido', async () => {
    const wrapper = mount(Table,{
      props: {
        users: []
      }
    });

    expect(wrapper.props('users')).toStrictEqual([])
    expect(wrapper.find('tr').exists()).toBeFalsy()
  })

  test('Si hay usuarios mostrar contenido', async () => {
    const users = await fetch('https://randomuser.me/api/?results=5').then(response => response.json());

    const wrapper = mount(Table,{
      props: {
        users: users.results
      }
    });

    // console.log("wrapper", wrapper.html())
    // console.log("wrapper", wrapper.props('users'))

    expect(wrapper.find('tr').exists()).toBeTruthy()
  })

  test('Si la api trae otro formato', async () => {
    let users = '2134123; 12341'

    if (typeof users !== 'object')
      users = []

    const wrapper = mount(Table,{
      props: {
        users
      }
    });

    expect(wrapper.find('tr').exists()).toBeFalsy()
  })

  test('Si la api no trae por ej el campo name completo', async () => {
    let users = [{
      "name": {
        "title": "Mr"
      },
      "email": "craig.griffin@example.com"
    }]

    if (typeof users !== 'object')
      users = []

    const wrapper = mount(Table,{
      props: {
        users
      }
    });
    // console.log("wrapper", wrapper.find('th[id=nameTest]').text())
    // console.log("wrapper", wrapper.props('users'))

    expect(wrapper.find('th[id=nameTest]').text()).toBeFalsy()
  })
})
]]></content>
  <tabTrigger>{ vitest }</tabTrigger>
  <scope>source.js</scope>
  <description>Ejemplos de varios vitests</description>
</snippet>
